package com.example.demo.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.example.demo.exception.UserNotFoundException;
import com.example.demo.model.User;
import com.example.demo.repository.UserRepository;

import jakarta.servlet.http.HttpSession;



import com.example.demo.model.User;
import com.example.demo.service.UserService;
import jakarta.servlet.http.HttpSession;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@CrossOrigin("http://localhost:3000")
@RequestMapping("/api/users")  // Set a base path for user-related endpoints
public class UserController {
    @Autowired
    private UserService userService;

    @PostMapping("/user")
    public ResponseEntity<?> newUser(@RequestBody User newUser) {
        return userService.newUser(newUser);
    }

    @GetMapping("/users")
    public List<User> getAllUsers() {
        return userService.getAllUsers();
    }

    @GetMapping("/user/{id}")
    public User getUserById(@PathVariable Long id) {
        return userService.getUserById(id);
    }

    @PutMapping("/user/{id}")
    public User updateUser(@RequestBody User newUser, @PathVariable Long id) {
        return userService.updateUser(newUser, id);
    }

    @DeleteMapping("/user/{id}")
    public String deleteUser(@PathVariable Long id) {
        return userService.deleteUser(id);
    }

    @PostMapping("/login")
    public String login(@RequestBody User loginUser, HttpSession session) {
        return userService.login(loginUser, session);
    }

    @PostMapping("/logout")
    public String logout(HttpSession session) {
        return userService.logout(session);
    }
}



/*
@RestController
@CrossOrigin("http://localhost:3000")
public class UserController {
	@Autowired
	private UserRepository userRepository;
	
	
	// POST Methods
	
	@PostMapping("/user")
	public ResponseEntity<?> newUser(@RequestBody User newUser) {
	    // Check if the email already exists
	    if (userRepository.existsByEmail(newUser.getEmail())) {
	        // Email is already registered, throw an exception or return an appropriate response
	        return ResponseEntity.status(HttpStatus.CONFLICT).body("Email already registered");
	    }

	    // Save the new user if the email is not already registered
	    User savedUser = userRepository.save(newUser);
	    return ResponseEntity.status(HttpStatus.CREATED).body(savedUser);
	}
	
	
	
	
	
	// GET Methods
	
	@GetMapping("/users")
	List<User> getAllUsers(){
		return userRepository.findAll();
	}
	
	
	
	
	
	// Getting specific user with respect to userid
	
	@GetMapping("/user/{id}")
	User getUserById(@PathVariable Long id) {
		return userRepository.findById(id)
			.orElseThrow(()->new UserNotFoundException(id));
	}
	
	
	
	
	
	// for editing the user
	
	@PutMapping("/user/{id}")
	User updateUser(@RequestBody User newUser, @PathVariable Long id) {
		return userRepository.findById(id)
			.map(user -> {
				user.setUsername(newUser.getUsername());
				user.setName(newUser.getName());
				user.setEmail(newUser.getEmail());
				user.setPassword(newUser.getPassword());
				return userRepository.save(user);
			}).orElseThrow(()->new UserNotFoundException(id));
	}
	
	
	
	
	
	
	// for deleting the user
	
	@DeleteMapping("/user/{id}")
	String deleteUser(@PathVariable Long id) {
		if(!userRepository.existsById(id)) {
			throw new UserNotFoundException(id);
		}
		userRepository.deleteById(id);
		return "User with id " + id + " has been deleted successfully.";
	}
	
	
	@PostMapping("/login")
	public String login(@RequestBody User loginUser, HttpSession session) {
	    User user = userRepository.findByEmailAndPassword(
	            loginUser.getEmail(),
	            loginUser.getPassword()
	    );

	    if (user != null) {
	        // Set some user-related information in the session if needed
	        session.setAttribute("userId", user.getId());
	        return "Login successful";
	    } else {
	        // You might want to return an error message or status code here
	        return "Invalid email or password";
	    }
	}

    @PostMapping("/logout")
    public String logout(HttpSession session) {
        // Invalidate the session
        session.invalidate();
        return "Logged out successfully";
    }
	
}

*/