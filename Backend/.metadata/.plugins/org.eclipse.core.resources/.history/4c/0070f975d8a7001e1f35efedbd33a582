package com.example.demo.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.example.demo.exception.UserNotFoundException;
import com.example.demo.model.User;
import com.example.demo.repository.UserRepository;

import jakarta.servlet.http.HttpSession;

@RestController
@CrossOrigin("http://localhost:3000")
public class UserController {
	@Autowired
	private UserRepository userRepository;
	
	
	// POST Methods
	
	@PostMapping("/user")
	User newUser(@RequestBody User newUser) {
		return userRepository.save(newUser);
	}
	
	
	
	
	
	// GET Methods
	
	@GetMapping("/users")
	List<User> getAllUsers(){
		return userRepository.findAll();
	}
	
	
	
	
	
	// Getting specific user with respect to userid
	
	@GetMapping("/user/{id}")
	User getUserById(@PathVariable Long id) {
		return userRepository.findById(id)
			.orElseThrow(()->new UserNotFoundException(id));
	}
	
	
	
	
	
	// for editing the user
	
	@PutMapping("/user/{id}")
	User updateUser(@RequestBody User newUser, @PathVariable Long id) {
		return userRepository.findById(id)
			.map(user -> {
				user.setUsername(newUser.getUsername());
				user.setName(newUser.getName());
				user.setEmail(newUser.getEmail());
				return userRepository.save(user);
			}).orElseThrow(()->new UserNotFoundException(id));
	}
	
	
	
	
	
	
	// for deleting the user
	
	@DeleteMapping("/user/{id}")
	String deleteUser(@PathVariable Long id) {
		if(!userRepository.existsById(id)) {
			throw new UserNotFoundException(id);
		}
		userRepository.deleteById(id);
		return "User with id " + id + " has been deleted successfully.";
	}
	
	
	
	@PostMapping("/login")
    public String login(@RequestBody User loginUser, HttpSession session) {
        User user = userRepository.findByUsernameAndPassword(
                loginUser.getUsername(),
                loginUser.getPassword()
        );

        if (user != null) {
            // Set some user-related information in the session if needed
            session.setAttribute("userId", user.getId());
            return "Login successful";
        } else {
            // You might want to return an error message or status code here
            return "Invalid username or password";
        }
    }

    @PostMapping("/logout")
    public String logout(HttpSession session) {
        // Invalidate the session
        session.invalidate();
        return "Logged out successfully";
    }
}
